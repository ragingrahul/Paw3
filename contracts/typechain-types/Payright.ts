/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Payright {
  export type CompanyStruct = {
    companyAddress: AddressLike;
    companyName: string;
    treasury: BigNumberish;
  };

  export type CompanyStructOutput = [
    companyAddress: string,
    companyName: string,
    treasury: bigint
  ] & { companyAddress: string; companyName: string; treasury: bigint };

  export type EmployeeStruct = {
    employeeAddress: AddressLike;
    companyAddress: AddressLike;
    dailyWageWei: BigNumberish;
    lastPayed: BigNumberish;
    activity: string;
  };

  export type EmployeeStructOutput = [
    employeeAddress: string,
    companyAddress: string,
    dailyWageWei: bigint,
    lastPayed: bigint,
    activity: string
  ] & {
    employeeAddress: string;
    companyAddress: string;
    dailyWageWei: bigint;
    lastPayed: bigint;
    activity: string;
  };
}

export interface PayrightInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCompany"
      | "addEmployee"
      | "companies"
      | "employees"
      | "fundCompany"
      | "getCompany"
      | "getEmployee"
      | "payout"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CompanyAdded"
      | "CompanyFunded"
      | "EmployeeAdded"
      | "EmployeeVerified"
      | "PayoutMade"
  ): EventFragment;

  encodeFunctionData(functionFragment: "addCompany", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addEmployee",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "companies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundCompany",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompany",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payout",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addCompany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "companies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCompany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
}

export namespace CompanyAddedEvent {
  export type InputTuple = [companyAddress: AddressLike, companyName: string];
  export type OutputTuple = [companyAddress: string, companyName: string];
  export interface OutputObject {
    companyAddress: string;
    companyName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompanyFundedEvent {
  export type InputTuple = [companyAddress: AddressLike, amount: BigNumberish];
  export type OutputTuple = [companyAddress: string, amount: bigint];
  export interface OutputObject {
    companyAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmployeeAddedEvent {
  export type InputTuple = [
    employeeAddress: AddressLike,
    companyAddress: AddressLike,
    dailyWageWei: BigNumberish,
    activity: string
  ];
  export type OutputTuple = [
    employeeAddress: string,
    companyAddress: string,
    dailyWageWei: bigint,
    activity: string
  ];
  export interface OutputObject {
    employeeAddress: string;
    companyAddress: string;
    dailyWageWei: bigint;
    activity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmployeeVerifiedEvent {
  export type InputTuple = [employeeAddress: AddressLike];
  export type OutputTuple = [employeeAddress: string];
  export interface OutputObject {
    employeeAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayoutMadeEvent {
  export type InputTuple = [employeeAddress: AddressLike, amount: BigNumberish];
  export type OutputTuple = [employeeAddress: string, amount: bigint];
  export interface OutputObject {
    employeeAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Payright extends BaseContract {
  connect(runner?: ContractRunner | null): Payright;
  waitForDeployment(): Promise<this>;

  interface: PayrightInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCompany: TypedContractMethod<[_companyName: string], [void], "nonpayable">;

  addEmployee: TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _dailyWageWei: BigNumberish,
      _activity: string
    ],
    [void],
    "nonpayable"
  >;

  companies: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint] & {
        companyAddress: string;
        companyName: string;
        treasury: bigint;
      }
    ],
    "view"
  >;

  employees: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, string] & {
        employeeAddress: string;
        companyAddress: string;
        dailyWageWei: bigint;
        lastPayed: bigint;
        activity: string;
      }
    ],
    "view"
  >;

  fundCompany: TypedContractMethod<[], [void], "payable">;

  getCompany: TypedContractMethod<
    [_companyAddress: AddressLike],
    [Payright.CompanyStructOutput],
    "view"
  >;

  getEmployee: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [Payright.EmployeeStructOutput],
    "view"
  >;

  payout: TypedContractMethod<
    [employeeAddress: AddressLike, owner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCompany"
  ): TypedContractMethod<[_companyName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addEmployee"
  ): TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _dailyWageWei: BigNumberish,
      _activity: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "companies"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint] & {
        companyAddress: string;
        companyName: string;
        treasury: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "employees"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, string] & {
        employeeAddress: string;
        companyAddress: string;
        dailyWageWei: bigint;
        lastPayed: bigint;
        activity: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fundCompany"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getCompany"
  ): TypedContractMethod<
    [_companyAddress: AddressLike],
    [Payright.CompanyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmployee"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike],
    [Payright.EmployeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "payout"
  ): TypedContractMethod<
    [employeeAddress: AddressLike, owner: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CompanyAdded"
  ): TypedContractEvent<
    CompanyAddedEvent.InputTuple,
    CompanyAddedEvent.OutputTuple,
    CompanyAddedEvent.OutputObject
  >;
  getEvent(
    key: "CompanyFunded"
  ): TypedContractEvent<
    CompanyFundedEvent.InputTuple,
    CompanyFundedEvent.OutputTuple,
    CompanyFundedEvent.OutputObject
  >;
  getEvent(
    key: "EmployeeAdded"
  ): TypedContractEvent<
    EmployeeAddedEvent.InputTuple,
    EmployeeAddedEvent.OutputTuple,
    EmployeeAddedEvent.OutputObject
  >;
  getEvent(
    key: "EmployeeVerified"
  ): TypedContractEvent<
    EmployeeVerifiedEvent.InputTuple,
    EmployeeVerifiedEvent.OutputTuple,
    EmployeeVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "PayoutMade"
  ): TypedContractEvent<
    PayoutMadeEvent.InputTuple,
    PayoutMadeEvent.OutputTuple,
    PayoutMadeEvent.OutputObject
  >;

  filters: {
    "CompanyAdded(address,string)": TypedContractEvent<
      CompanyAddedEvent.InputTuple,
      CompanyAddedEvent.OutputTuple,
      CompanyAddedEvent.OutputObject
    >;
    CompanyAdded: TypedContractEvent<
      CompanyAddedEvent.InputTuple,
      CompanyAddedEvent.OutputTuple,
      CompanyAddedEvent.OutputObject
    >;

    "CompanyFunded(address,uint256)": TypedContractEvent<
      CompanyFundedEvent.InputTuple,
      CompanyFundedEvent.OutputTuple,
      CompanyFundedEvent.OutputObject
    >;
    CompanyFunded: TypedContractEvent<
      CompanyFundedEvent.InputTuple,
      CompanyFundedEvent.OutputTuple,
      CompanyFundedEvent.OutputObject
    >;

    "EmployeeAdded(address,address,uint256,string)": TypedContractEvent<
      EmployeeAddedEvent.InputTuple,
      EmployeeAddedEvent.OutputTuple,
      EmployeeAddedEvent.OutputObject
    >;
    EmployeeAdded: TypedContractEvent<
      EmployeeAddedEvent.InputTuple,
      EmployeeAddedEvent.OutputTuple,
      EmployeeAddedEvent.OutputObject
    >;

    "EmployeeVerified(address)": TypedContractEvent<
      EmployeeVerifiedEvent.InputTuple,
      EmployeeVerifiedEvent.OutputTuple,
      EmployeeVerifiedEvent.OutputObject
    >;
    EmployeeVerified: TypedContractEvent<
      EmployeeVerifiedEvent.InputTuple,
      EmployeeVerifiedEvent.OutputTuple,
      EmployeeVerifiedEvent.OutputObject
    >;

    "PayoutMade(address,uint256)": TypedContractEvent<
      PayoutMadeEvent.InputTuple,
      PayoutMadeEvent.OutputTuple,
      PayoutMadeEvent.OutputObject
    >;
    PayoutMade: TypedContractEvent<
      PayoutMadeEvent.InputTuple,
      PayoutMadeEvent.OutputTuple,
      PayoutMadeEvent.OutputObject
    >;
  };
}
